<?php
/**
 * Created by PhpStorm.
 * User: Jesse Tam
 * Date: 2019/6/6 0006
 * Time: 下午 5:53
 */

namespace Etc;

require_once __DIR__ . "/../Solution/Solution.hphp";
require_once __DIR__ . "/../Solution/PageWeb.hphp";

use Solution\PageWeb;
use Solution\Solution;
use TamPub1\Etc;
use TamPub1\FileOperation;
use TamPub1\StringFunc;
use TamPub1\Tree;

/**
 * Class EEngine This class follow the static way, that means every thread have only one instance.
 * @package Etc
 */
class EEngine {
    /**
     * @var \Solution\Solution
     */
    public $solution;

    public function __construct() {
        $this->solution = new \Solution\Solution();
    }

    public function loadProject(string $projectPath): string {
        if ($this->solution->projectExists($projectPath)) {
            return "";
        }
        $result = $this->solution->loadProject($projectPath);
        if (StringFunc::length($result) > 0) {
            return "EEnging.loadProject error:" . $result;
        }
        Pub::$log->writeCommon("load project: " . $projectPath);
        return "";
    }

    public function loadProjectByIndex(int $projectIndex, string $projectPath): void {
        if ($projectIndex < 0) return;
        if ($projectIndex >= count($this->solution->projects->children)) {
            $this->solution->loadProject($projectPath);
            Pub::$log->writeCommon("load project: " . $projectPath);
            return;
        }
        if (!(StringFunc::toUpper($this->solution->projects->children[$projectIndex]->value->projectPath) ===
            StringFunc::toUpper($projectPath))) {
            $this->solution->loadProject($projectPath, $projectIndex);
            Pub::$log->writeCommon("load project: " . $projectPath);
            return;
        }
        if ($this->solution->projects->children[$projectIndex]->value->projectLastModifyTime !=
            filemtime($projectPath . "project.xml")) {
            $this->solution->loadProject($projectPath, $projectIndex);
            Pub::$log->writeCommon("load project: " . $projectPath);
            return;
        }
    }

    /**
     * pagePath前面必须包含项目名（项目文件所在的目录名字），页面不存在返回空，页面没加载则自动加载
     * @param string $pagePath
     * @return Tree TamPub1.Tree<Solution.Solution.Item>
     */
    public function getPageBak(string $pagePath): Tree {
        $pagePath = StringFunc::addRearChar($pagePath, '/') . "page.xml";
        $item = $this->solution->getItem($pagePath);
        if ($item == null) return null;
        //自动加载
        if ($item->value->page == null) {
            $item->value->page = new PageWeb();
            $item->value->page->projectItem = $item;
        }
        $item->value->page->loadFromFile(Solution::getDiskPath($item) . "page.xml");
        return $item;
    }

    /**
     * old version backup
     * @param string $pagePath
     * @return null|PageWeb
     */
    private function getPageV1(string $pagePath): ? \Solution\PageWeb {
        $pagePath = StringFunc::addRearChar($pagePath, '/') . "page.xml";
        $item = $this->solution->getItem($pagePath);
        if ($item == null) return null;
        if ($item->value->page != null) {
            if (filemtime(Solution::getDiskPath($item) . "page.xml") == $item->value->page->fileLastWriteTime) {
                return $item->value->page;
            }
        }
        $result = new PageWeb();
        $item->value->page = $result;
        $result->projectItem = $item;
        $result->loadFromFile(Solution::getDiskPath($item) . "page.xml");
        Pub::$log->writeCommon("load page: " . Solution::getDiskPath($item) . "page.xml");
        $result->solution = $this->solution;
        return $result;
    }

    /**
     * search page in solution via pagePath, and load page into memory.
     * if page file(xml file) has been modified then reload page and delete code template cache file
     * @param string $pagePath
     * @return \Solution\PageWeb
     */
    public function getPage(string $pagePath): ? \Solution\PageWeb {
        $pagePath = StringFunc::addRearChar($pagePath, '/') . "page.xml";
        $item = $this->solution->getItem($pagePath);
        if ($item == null) return null;
        $pageXmlFilename = Solution::getDiskPath($item) . "page.xml";
        $xmlModifyTime = filemtime($pageXmlFilename);
        $codeCachePath = FileOperation::currentFilePath() . "cache" . FileOperation::extractFilePath($pagePath);
        if ($xmlModifyTime === false) return null;
        if ($item->value->projectLastModifyTime == $xmlModifyTime) {
            $item->value->page = unserialize(FileOperation::loadToStringGBK($codeCachePath . "_page.epage"));
            $item->value->page->projectItem = $item;
            $item->value->page->solution = $this->solution;
        } else {
            $startTime = microtime(true);
            $result = new PageWeb();
            $item->value->page = $result;
            $result->projectItem = $item;
            $result->loadFromFile($pageXmlFilename);
            //delete code template cache file;
            FileOperation::deleteFile($codeCachePath . "_initControl.epage");
            FileOperation::saveString($codeCachePath . "_page.epage", serialize($result));
            $item->value->projectLastModifyTime = $xmlModifyTime;
            Pub::$log->writeCommon("load page(" . floor((microtime(true) - $startTime) * 1000) . "ms): " . Solution::getDiskPath($item) . "page.xml");
            $result->solution = $this->solution;
        }
        return $result;
    }
}