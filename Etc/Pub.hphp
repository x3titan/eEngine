<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2019/6/6 0006
 * Time: 上午 11:18
 */

namespace Etc;

require_once __DIR__ . "/../PubFuncPhp/TamPub1.hphp";
require_once __DIR__ . "/EEngine.hphp";
require_once __DIR__ . "/../PubFuncPhp/TamClass1.hphp";

use TamPub1\ConfigurationManager;
use TamPub1\FileOperation;
use TamPub1\StringData2;
use TamPub1\StringFunc;
use TamPub1\TamLocker;

class Pub {
    /**
     * @var EEngine
     */
    public static $eEngine;
    /**
     * @var \TamClass1\TamDiskLog
     */
    public static $log;
    /**
     * @var TamLocker
     */
    public static $lockObject;
    public static $pathSeperator = '/';

    private static $initialized = false;
    public static $sTemp;

    public static function init(): void {
        if (self::$initialized) return;
        self::$lockObject = new TamLocker();
        self::$log = new  \TamClass1\TamDiskLog();
        self::$log->filename = ConfigurationManager::readString("ePage", "logFilename");
        self::$log->addDatetime = true;
        self::$eEngine = new EEngine();
        self::$initialized = true;
    }

    /**
     * @return int 返回实际载入项目的数量
     */
    public static function loadProject(): int {
        self::$lockObject->Lock();
        $result = 0;
        $needReload = false;
        //int projectCount;

        $projectCount = ConfigurationManager::readInt("ePage", "projectCount");
        if (count(self::$eEngine->solution->projects->children) != $projectCount) {
            $needReload = true;
        } else if (self::$eEngine->solution->needReload()) {
            $needReload = true;
        }
        if (!$needReload) {
            self::$lockObject->Unlock();
            return $projectCount;
        }
        self::$eEngine->solution->projects->clear(); //强制清缓存，实际应用中应去掉

        //string projectPath;
        for ($i = 0; $i < $projectCount; $i++) {
            $projectPath = ConfigurationManager::readString("ePage", "project" . $i);
            if ($projectPath == null) continue;
            $rstring = self::$eEngine->loadProject($projectPath);
            if (StringFunc::length($rstring) > 0) {
                self::$log->writeWarning("无法载入项目文件，result=" . $rstring . ";project=" . $projectPath);
            } else {
                $result++;
            }
        }
        self::$lockObject->Unlock();
        return $result;
    }

    /**
     * 2019/06/10 php cache first loader
     * @return int 返回实际载入项目的数量
     */
    public static function loadProjectCache(): void {
        $loadCount = 0;
        $projectCount = ConfigurationManager::readInt("ePage", "projectCount");
        for ($i = 0; $i < $projectCount; $i++) {
            $projectPath = ConfigurationManager::readString("ePage", "project" . $i);
            if ($projectPath == null) {
                self::$log->writeWarning("can not read configuration value, [ePage], project" . $i . ", load project canceled.");
                break;
            }
            \Etc\Pub::$pathSeperator = FileOperation::getPathSeperator($projectPath);
            $projectPath = StringFunc::addRearChar($projectPath, \Etc\Pub::$pathSeperator);
            self::$eEngine->loadProjectByIndex($i, $projectPath);
        }
        while (count(self::$eEngine->solution->projects->children) > $projectCount) {
            $node = self::$eEngine->solution->projects->children[count(self::$eEngine->solution->projects->children) - 1];
            self::$log->writeCommon("remove project: " . $node->projectPath);
            self::$eEngine->solution->projects->remove($node);
        }
    }


    public static function saveEEngine(): void {
        $buffBody = serialize(self::$eEngine);

        $buffHead = new StringData2();
        $buffHead->appendInt32(1974);
        $buffHead->appendInt32(strlen($buffBody));
        $mp = shmop_open(1989, 'c', 0755, strlen($buffHead->buff));
        shmop_write($mp, $buffHead->buff, 0);
        shmop_close($mp);

        $mp = shmop_open(1979, 'c', 0755, strlen($buffBody));
        shmop_write($mp, $buffBody, 0);
        shmop_close($mp);
    }

    public static function loadEEngine(): bool {
        $buffHead = new StringData2();
        $mp = shmop_open(1989, 'c', 0755, 16);
        $buffHead->buff = shmop_read($mp, 0, 16);
        if (!($buffHead->buff)) $buffHead->buff = "";
        shmop_close($mp);
        if ($buffHead->readInt32() != 1974) return false;
        $size = $buffHead->readInt32();
        $mp = shmop_open(1979, 'c', 0755, $size);
        $buffBody = shmop_read($mp, 0, $size);
        shmop_close($mp);
        self::$eEngine = unserialize($buffBody);
        return true;
    }
}