<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2019/6/6 0006
 * Time: 上午 11:18
 */

namespace Etc;

require_once __DIR__ . "/../PubFuncPhp/TamPub1.hphp";
require_once __DIR__ . "/EEngine.hphp";
require_once __DIR__ . "/../PubFuncPhp/TamClass1.hphp";

use TamPub1\ConfigurationManager;
use TamPub1\FileOperation;
use TamPub1\ShareMemory;
use TamPub1\StringBuilder;
use TamPub1\StringData2;
use TamPub1\StringFunc;
use TamPub1\TamLocker;

class Pub {
    /**
     * @var EEngine
     */
    public static $eEngine;
    /**
     * @var \TamClass1\TamDiskLog
     */
    public static $log;
    /**
     * @var TamLocker
     */
    public static $lockObject;
    public static $pathSeperator = '/';

    private static $initialized = false;
    public static $sTemp;

    public static function init(): void {
        if (self::$initialized) return;
        self::$lockObject = new TamLocker();
        self::$log = new  \TamClass1\TamDiskLog();
        self::$log->filename = ConfigurationManager::readString("ePage", "logFilename");
        self::$log->addDatetime = true;
        self::$eEngine = new EEngine();
        self::$initialized = true;
    }

    /**
     * @return int 返回实际载入项目的数量
     */
    public static function loadProject(): int {
        self::$lockObject->Lock();
        $result = 0;
        $needReload = false;
        //int projectCount;

        $projectCount = ConfigurationManager::readInt("ePage", "projectCount");
        if (count(self::$eEngine->solution->projects->children) != $projectCount) {
            $needReload = true;
        } else if (self::$eEngine->solution->needReload()) {
            $needReload = true;
        }
        if (!$needReload) {
            self::$lockObject->Unlock();
            return $projectCount;
        }
        self::$eEngine->solution->projects->clear(); //强制清缓存，实际应用中应去掉

        //string projectPath;
        for ($i = 0; $i < $projectCount; $i++) {
            $projectPath = ConfigurationManager::readString("ePage", "project" . $i);
            if ($projectPath == null) continue;
            $rstring = self::$eEngine->loadProject($projectPath);
            if (StringFunc::length($rstring) > 0) {
                self::$log->writeWarning("无法载入项目文件，result=" . $rstring . ";project=" . $projectPath);
            } else {
                $result++;
            }
        }
        self::$lockObject->Unlock();
        return $result;
    }

    /**
     * 2019/06/10 php cache first loader
     * @return int 返回实际载入项目的数量
     */
    public static function loadProjectCache(): void {
        $loadCount = 0;
        $projectCount = ConfigurationManager::readInt("ePage", "projectCount");
        for ($i = 0; $i < $projectCount; $i++) {
            $projectPath = ConfigurationManager::readString("ePage", "project" . $i);
            if ($projectPath == null) {
                self::$log->writeWarning("can not read configuration value, [ePage], project" . $i . ", load project canceled.");
                break;
            }
            \Etc\Pub::$pathSeperator = FileOperation::getPathSeperator($projectPath);
            $projectPath = StringFunc::addRearChar($projectPath, \Etc\Pub::$pathSeperator);
            self::$eEngine->loadProjectByIndex($i, $projectPath);
        }
        while (count(self::$eEngine->solution->projects->children) > $projectCount) {
            $node = self::$eEngine->solution->projects->children[count(self::$eEngine->solution->projects->children) - 1];
            self::$log->writeCommon("remove project: " . $node->value->projectPath);
            self::$eEngine->solution->projects->remove($node);
        }
    }


    public static function saveEEngine(): void {
        ShareMemory::write(0xAEE, serialize(self::$eEngine));
    }

    public static function loadEEngine(): bool {
        $buff = ShareMemory::read(0xAEE);
        if ($buff === "") return false;
        self::$eEngine = unserialize($buff);
        return true;
    }

    public static function selfUpgraded(): bool {
        //read last status
        $lastStatus = ShareMemory::read(0xA70);

        //generate current status
        $currentStatus = new StringBuilder();
        self::generateCurrentStatus($currentStatus, FileOperation::currentFilePath());

        //write to share memory
        ShareMemory::write(0xA70, $currentStatus);

        //compare
        return ($currentStatus . "") !== $lastStatus;
    }

    private static function generateCurrentStatus(StringBuilder $currentStatus, string $dir): bool {
        $dir = StringFunc::addRearChar($dir, \Etc\Pub::$pathSeperator);
        if (!FileOperation::pathExists($dir)) {
            return false;
        }

        $files = scandir($dir);
        foreach ($files as $file) {
            if ($file === ".") continue;
            if ($file === "..") continue;
            if (is_dir($dir . $file)) {
                self::generateCurrentStatus($currentStatus, $dir . $file . \Etc\Pub::$pathSeperator);
            } else {
                $ext = StringFunc::toLower(FileOperation::getFileExt($file));
                if (($ext !== "php") && ($ext !== "hphp")) continue;
                $currentStatus->Append($dir . $file);
                $time = filemtime($dir . $file);
                if ($time === false) {
                    $currentStatus->Append("0000");
                } else {
                    $currentStatus->Append($time . "|");
                }
            }
        }
        return true;
    }
}