<?php
/**
 * Created by PhpStorm.
 * User: Jesse Tam
 * Date: 2019/6/3 0003
 * Time: 下午 8:54
 */

namespace Solution;

use MongoDB\BSON\ObjectId;
use ScriptEngine\TaskSet;
use Solution\Page\Control;
use TamPub1;

//require_once __DIR__ . '/../PubFuncPhp/TamPub1.hphp';

/**
 * 页面基础类
 * Class Page
 * @package Solution
 */
class Page {
    /**
     * @var \TamPub1\Tree Tree<Solution.Item>
     */
    public $projectItem = null;
    /**
     * @var \TamPub1\Tree Tree<Control>
     */
    public $controls = null;
    /**
     * @var \TamPub1\Tree Tree<Control>
     */
    public $divRoot = null;
    /**
     * @var TaskSet
     */
    public $taskSet = null;
    /**
     * 需要创建的控件类型，空表示用户不需要创建控件
     * @var string
     */
    public $createControlType = "";
    /**
     * //触点1/2大小
     * @var int
     */
    public $touchSize = 3;
    /**
     * 本页在硬盘存在的物理路径和文件名
     * @var string
     */
    public $filename = "";
    /**
     * 本页面文件在物理硬盘上的上次被修改时间
     * @var int
     */
    public $fileLastWriteTime = 0;
    /**
     * Object类型，目前暂时用不上
     * @var null
     */
    public $lockObject = null;

    //public $gridLine = new GridLine(); //界面功能不需要做

    public function __construct() {
        $this->controls = new TamPub1\Tree();
        $this->taskSet = new TaskSet();
        $this->fileLastWriteTime = time();
        $this->lockObject = null;
        $this->init();
    }

    private function init(): void {
        $this->controls->clear();
        $this->divRoot = $this->controls->addValue(new Control());
        $this->divRoot->value->type = "DivRoot";
        $this->divRoot->value->name = "divRoot";
        $this->initControlProperty($this->divRoot->value);
        $this->divRoot->value->property->getItem("left")->value->asInt32 = 0;
        $this->divRoot->value->property->getItem("top")->value->asInt32 = 0;
        $this->divRoot->value->property->getItem("width")->value->asInt32 = 1000;
        $this->divRoot->value->property->getItem("height")->value->asInt32 = 800;
        $this->divRoot->value->property->getItem("dockX")->value->asString = "center";
        $this->divRoot->value->property->getItem("backgroundColor")->value->asString = "ffffff";
        $this->divRoot->value->property->getItem("bgColorEnabled")->value->asString = "true";
    }

    //virtual function
    public function loadFromFile(string $filename): string {
        if (!TamPub1\FileOperation::exists($filename)) {
            return "页面文件不存在：" . $filename;
        }
        $time = filemtime($filename);
        if ((TamPub1\StringFunc::toUpper($this->filename) === TamPub1\StringFunc::toUpper($filename)) && ($this->fileLastWriteTime == $time)) return "";
        $doc = simplexml_load_file($filename);
        if (!$doc) {
            return "页面文件不存在:" . $filename;
        }
        $this->loadFromString($doc->saveXML());
        $this->fileLastWriteTime = $time;
        $this->filename = $filename;
        //Etc.Pub.log.writeCommon("load page: " + filename);
        return "";
    }

    public function loadFromString(string $buff): void {
        $this->init();
        $doc = simplexml_load_string($buff);
        //System.Xml.XmlNode node;
        $item = null;
        //读取控件
        //string pName, pValue;
        $nodes = $doc->xpath("/page/controls/control");
        for ($i = 0; $i < count($nodes); $i++) {
            $node = $nodes[$i];
            $node = $node->attributes()->pathname;
            if (!$node) continue;
            $pathname = $node;
            $item = $this->createPath($this->controls, $pathname);
            $node = $nodes[$i];
            $node = $node->attributes()->type;
            if (!$node) continue;
            $item->value->type = $node;
            if ($item->value->name === "divRoot") {
                //仅为兼容旧程序设计，脚本全部为新版本后可删除本语句
                $item->value->type = "DivRoot";
            }
            $this->initControlProperty($item->value);
            for ($j = 0; $j < count($nodes[$i]->children()); $j++) {
                $node = $nodes[$i]->children()[$j];
                //if ($node->  NodeType == System . Xml . XmlNodeType . Comment) continue;
                $pName = $node->getName();
                $pValue = TamPub1\ConfigFileXml::readStringFromNode($node, $item->value->property->getItem($pName)->defaultValue->asString);
                $item->value->property->getItem($pName)->value->asString = $pValue;
            }
        }
        //读取TaskSet
        $this->taskSet->clear();
        $nodes = $doc->xpath("/page/taskSet/taskSetItem");
        //ScriptEngine.TaskSet.Item taskSetItem;
        for ($i = 0; $i < count($nodes); $i++) {
            $node = $nodes[$i];
            $node = $node->attributes()->name;
            if (!$node) continue;
            $taskSetItem = new \ScriptEngine\TaskSet\Item();
            $taskSetItem->name = $node;
            array_push($this->taskSet->items, $taskSetItem);
            for ($j = 0; $j < count($nodes[$i]->children()); $j++) {
                $node = $nodes[$i]->children()[$j];
                //if ($node->NodeType == System . Xml -> XmlNodeType -> Comment) continue;
                if ($node->getName() === "script1") {
                    $taskSetItem->script1 = TamPub1\ConfigFileXml::readStringFromNode($node, "");
                } else if ($node->getName() === "script2") {
                    $taskSetItem->script2 = TamPub1\ConfigFileXml::readStringFromNode($node, "");
                } else if ($node->getName() === "script3") {
                    $taskSetItem->script3 = TamPub1\ConfigFileXml::readStringFromNode($node, "");
                }
            }
        }
        //读取gridLine
        /* 不必读取了
        gridLine -> items -> Clear();
            $nodes = doc -> SelectNodes("/page/gridLines/gridLine");
            for ($i = 0; $i < $nodes->Count; $i++) {
                $node = $nodes[$i]->Attributes->GetNamedItem("type");
                if ($node == null) continue;
                if ($node->Value->Equals("v")) {
                    $node = $nodes[$i]->Attributes->GetNamedItem("value");
                    if ($node == null) continue;
                    gridLine -> addV(TamPub1->ConfigFileXml->readInt32($node, 10));
            } else if ($node->Value->Equals("h")) {
                    $node = $nodes[$i]->Attributes->GetNamedItem("value");
                    if ($node == null) continue;
                    gridLine -> addH(TamPub1->ConfigFileXml->readInt32($node, 10));
            }
            }
        */
    }

}

namespace Solution\Page;

use TamClass1\PropertyList;
use TamPub1\StringFunc;

/**
 * 控件类
 * Class Control
 * @package Solution\Page
 */
class Control {
    private $fName = "";
    /**
     * 控件类型
     * @var string
     */
    public $type = "";
    /**
     * 控件如果是temp名字开头的（临时控件），则此值是temp后面的序号，为快速生成名字算法使用
     * @var int
     */
    public $tempSn = -1;
    /**
     * @var PropertyList
     */
    public $property;
    /// <summary>public System.Windows.Forms.TreeNode displayTreeNode = null;</summary>
    public $displayTreeNode = null;

    public function __construct() {
        $this->property = new PropertyList();
    }

    public function __get($name) {
        if ($name === "name") {
            return $this->fName;
        } else {
            return "";
        }
    }

    public function __set($name, $value) {
        if ($name === "name") {
            $this->fName = $value;
            if (StringFunc::copy($this->fName, 0, 4) === "temp") {
                $temp = StringFunc::copy($this->fName, 4, 10000);
                if (StringFunc::isInt($temp)) {
                    $this->tempSn = (int)$temp;
                } else {
                    $this->tempSn = -1;
                }
            } else $this->tempSn = -1;
        }
    }

    public function assign(Control $value): void {
        $this->name = $value->name;
        $this->type = $value->type;
        $this->tempSn = $value->tempSn;
        $this->property->assign($value->property);
        $this->displayTreeNode = $value->displayTreeNode;
    }

    public function  clone(): Control {
        $result = new Control();
        $result->assign($this);
        return $result;
    }
}
