<?php
/**
 * Created by PhpStorm.
 * User: Jesse Tam
 * Date: 2019/6/4 0004
 * Time: 下午 11:52
 */

namespace Solution;


use TamPub1\ConfigFileXml;
use TamPub1\FileOperation;

class Solution {
    /**
     * @var \TamPub1\Tree Tree<Item>
     */
    public $projects;
    public $name = "";
    public $filename = "";
    public $note = "";
    public $path = ""; //解决方案在本地磁盘的绝对路径
    //public object lockSolution = new object();
    //private System.Windows.Forms.TreeView treeView = null; //显示目录结构的控件
    public function __construct() {
        $this->projects = new \TamPub1\Tree();
    }

    public function newProject(): string {
        if (!FileOperation::pathExists($this->path)) {
            return "无法创建新项目，目录不存在：" . $this->path;
        }
        //产生项目
        $projectPath = $this->path . $this->generateProjectName() . '\\';
        FileOperation::createDir($projectPath);
        //创建project.xml
        $filename = $projectPath . "project.xml";
        if (FileOperation::exists($filename)) {
            FileOperation::deleteFile($filename);
        }
        $doc = new \SimpleXMLElement("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" .
            "<EBProj>\r\n" . "</EBProj>\r\n");
        //System->Xml->XmlNode $root, xmlControls;
        $root = $doc;
        $xmlControls = $root->addChild("projectItems");
        $xmlControls->addAttribute("count", "0");
        $doc->asXML($filename);
        $this->loadProject($projectPath);
        return "";
    }

    public function reloadProject(int $projectIndex): string {
        if (($projectIndex < 0) || ($projectIndex >= count($this->projects->children))) return "序号超出范围";
        $project = $this->projects->children[$projectIndex];
        array_splice($this->projects->children, $projectIndex, 1);
        $result = $this->loadProject($project->value->projectPath);
        $project = $this->projects->children[count($this->projects->children) - 1];
        $this->projects->children[count($this->projects->children) - 1] = $this->projects->children[$projectIndex];
        $this->projects->children[$projectIndex] = $project;
        return $result;
    }

    public function loadProject(string $projectPath): string {
        $projectPath = StringFunc::addRearChar($projectPath, '\\');
        $project = $this->projects->addValue(new Item());
        $project->value->type = Item::$ITEM_TYPE_PROJECT;
        $project->value->projectFolderName = FileOperation::getFolderName($projectPath);
        $project->value->projectPath = $projectPath;
        $project->value->skin = new \Etc\Skin();
        $project->value->skin->loadDir($project->value->projectPath . "skins\\");
        $project->value->dbConnection = new \ScriptEngine\DBConnection();
        $dbConnection = $project->value->dbConnection;
        if (!FileOperation::exists($projectPath . "project.xml")) {
            return "project.xml文件不存在";
        }
        $doc = simplexml_load_file($projectPath + "project.xml");
        //产生项目文件
        //\TamPub1\Tree projectFile;
        $projectFile = $project->add(new Item());
        $projectFile->value->type = Item::$ITEM_TYPE_PROJECTFILE;
        $projectFile->value->filename = "project.xml";
        //读取项目通用信息
        //System->Xml->XmlNode node, nodeTemp;
        ConfigFileXml::create($doc, "/EBProj/projectName");
        $node = $doc->xpath("/EBProj/projectName")[0];
        $project->value->projectName = ConfigFileXml::readStringFromNode($node, "");
        if ($project->value->projectName === "") {
            $project->value->projectName = "新建项目";
        }
        //读取页信息V2
        //\TamPub1\Tree item;
        $parentNodes = $doc->xpath("/EBProj/projectItems")[0];
        for ($i = 0; $i < count($parentNodes->children()); $i++) {
            //创建页面目录
            $node = $parentNodes->children()[$i];
            if ($node->Name->Equals("page")) {
                $nodeTemp = $node->Attributes->GetNamedItem("pathname");
                if ($nodeTemp == null) continue;
                $pathname = $nodeTemp->Value;
                $item = $this->createPath($project, $pathname);
                //创建页面信息文件
                //\TamPub1\Tree frame;
                $frame = $item->addValue(new Item());
                $frame->value->type = Item::$ITEM_TYPE_PAGE;
                $frame->value->filename = "page.xml";
                $nodeTemp = $node->Attributes->GetNamedItem("alias");
                if (nodeTemp != null) {
                    item->value->folderAlias = nodeTemp->Value;
                        }
            } else if ($node->Name->Equals("image")) {
                $node = $node->Attributes->GetNamedItem("pathname");
                if ($node == null) continue;
                $pathname = $node->Value;
                item = createPath(project, pathname);
                item->value->type = Item::$ITEM_TYPE_IMAGE;
                        item->value->filename = TamPub1->FileOperation->extractFileName(pathname);
                    }
        }
        //读取数据库连接信息
        dbConnection->items->Clear();
                ScriptEngine->DBConnection->Item connectionItem;
                System->Xml->XmlNodeList nodes = $doc->SelectNodes("/EBProj/dbConnections/connection");
                for (int $i = 0; $i < nodes->Count; $i++) {
            $node = nodes[$i];
            $node = $node->Attributes->GetNamedItem("name");
            if ($node == null) continue;
            connectionItem = new ScriptEngine->DBConnection->Item();
            connectionItem->name = $node->Value;
            dbConnection->items->Add(connectionItem);
            //db connection string
            $node = nodes[$i]->SelectSingleNode("connectionString");
            if ($node == null) continue;
            connectionItem->connectionString = TamPub1->ConfigFileXml->readString(node, "");
        }
                $project->value->projectFilePathName = projectPath + "project.xml";
                FileInfo fi;
                try {
                    fi = new FileInfo($project->value->projectFilePathName);
                } catch {
                    return "无法获取项目文件信息";
                }
                $project->value->projectLastModifyTime = fi->LastWriteTime;
                $project->value->enabled = true;
                return "";
        }

    public function saveProject(\TamPub1\Tree $project): string {
        if ($project->value->type != Item::$ITEM_TYPE_PROJECT) return "project元素无效";
        $item = $project->getFirst();
        $filename = $project->value->projectPath + "project.xml";
        System->Xml->XmlDocument $doc = new System->Xml->XmlDocument();
            System->Xml->XmlNode $root, xmlControls, xmlControl, xmlNode;
            $root = $doc->AppendChild($doc->CreateElement("EBProj"));
            $root->AppendChild($doc->CreateElement("projectName"))->InnerXml = item->value->projectName;
            //写入页面信息V2
            xmlControls = $root->AppendChild($doc->CreateElement("projectItems"));
            $projectItemCount = 0;
            $project->getFirst();
            while ((item = $project->getNext()) != null) {
                if (item->value->type == Item->ITEM_TYPE_PAGE) {
                    xmlControl = xmlControls->AppendChild($doc->CreateElement("page"));
                    TamPub1->ConfigFileXml->appendAttr($doc, xmlControl, "pathname", getPath(item));
                    TamPub1->ConfigFileXml->appendAttr($doc, xmlControl, "alias", item->parent->value->folderAlias);
                    projectItemCount++;
                }

else
if (item->value->type == Item->ITEM_TYPE_IMAGE) {
                    xmlControl = xmlControls->AppendChild($doc->CreateElement("image"));
    TamPub1->ConfigFileXml->appendAttr($doc, xmlControl, "pathname", getPath(item) + '/' + item->value->filename);
    projectItemCount++;
}
}
TamPub1->ConfigFileXml->appendAttr($doc, xmlControls, "count", projectItemCount->ToString());
//写入数据库连接
xmlControls = $root->AppendChild($doc->CreateElement("dbConnections"));
TamPub1->ConfigFileXml->appendAttr($doc, xmlControls, "count", $project->value->dbConnection->items->Count->ToString());
for (int $i = 0; $i < $project->value->dbConnection->items->Count;
$i++) {
            xmlControl = xmlControls->AppendChild($doc->CreateElement("connection"));
    TamPub1->ConfigFileXml->appendAttr($doc, xmlControl, "name", $project->value->dbConnection->items[$i]->name);
    xmlNode = xmlControl->AppendChild($doc->CreateElement("connectionString"));
    xmlNode->InnerXml = TamPub1->ConfigFileXml->getDDataTextAuto($project->value->dbConnection->items[$i]->connectionString);
}
            if (System->IO->File->Exists(filename)) {
            System->IO->File->Delete(filename);
            }
            $doc->Save(filename);
            FileInfo fi;
            try {
                fi = new FileInfo($project->value->projectFilePathName);
            } catch {
                return "无法获取项目文件信息";
            }
            $project->value->projectLastModifyTime = fi->LastWriteTime;
            return "";
        }

    /// <summary>判断硬盘的物理文件是否发生变化，如果变化则需要重新载入项目</summary>
    public function needReload(): bool {
        FileInfo fi;
            for (int $i = 0; $i < $this->projects->children->Count; $i++) {
            try {
                fi = new FileInfo($this->projects->children[$i]->value->projectFilePathName);
            } catch {
                return true;
            }
            if (fi->LastWriteTime != $this->projects->children[$i]->value->projectLastModifyTime) return true;
    }
            return false;
        }
    /// <summary>
    /// 获取item所属的project元素
    /// </summary>
    public function getProject(\TamPub1\Tree $item): \TamPub1\Tree {
        lock(lockSolution){
                while (true) {
                    if (item->value->type == Item->ITEM_TYPE_PROJECT) {
                        return item;
                    }
                    item = item->parent;
                    if (item == null) {
                        return null;
                    }
                }
            }
        }
    /// <summary>
    /// 在item下面创建一个新的page.xml
    /// </summary>
    public function newPage(\TamPub1\Tree $item): \TamPub1\Tree {
        if (item->value->type != Item->ITEM_TYPE_FOLDER) return null; //不是目录无法创建
    for (int $i = 0; $i < item->children->Count;
    $i++) {
            if (item->children[$i]->value->type == Item->ITEM_TYPE_PAGE) {
                return null; //页面文件已经存在
            }
    }
            item = item->addFirst(new Item());
            item->value->type = Item->ITEM_TYPE_PAGE;
            item->value->filename = "page.xml";
            string $this->path = getDiskPath(item);
            //创建page.xml
            string filename = $this->path + "page.xml";
            if (System->IO->File->Exists(filename)) {
            System->IO->File->Delete(filename);
            }
            System->Xml->XmlDocument $doc = new System->Xml->XmlDocument();
            System->Xml->XmlNode $root, xmlControls;
            $root = $doc->AppendChild($doc->CreateElement("page"));
            xmlControls = $root->AppendChild($doc->CreateElement("controls"));
            TamPub1->ConfigFileXml->appendAttr($doc, xmlControls, "count", "0");
            xmlControls = $root->AppendChild($doc->CreateElement("sqlResultSet"));
            TamPub1->ConfigFileXml->appendAttr($doc, xmlControls, "count", "0");
            $doc->Save(filename);
            //保存项目变化
            saveProject(getProject(item));
            return item;
        }

    public function scanFolder(\TamPub1\Tree $rootItem, \TamPub1\Tree $item): string {
        StringBuilder $result = new StringBuilder();
            if ((item->value->type != Item->ITEM_TYPE_FOLDER) && (item->value->type != Item->ITEM_TYPE_PROJECT)) return "不是目录无法扫描\n";
            string $this->path = getDiskPath(item);
            string rootPath = getDiskPath(rootItem);

            DirectoryInfo dir = new DirectoryInfo($this->path);
            //不是目录
            if (dir == null) return "不是目录无法扫描\n";
            FileSystemInfo[] files = dir->GetFileSystemInfos();
            for (int $i = 0; $i < files->Length; $i++) {
            FileInfo file = files[$i] as FileInfo;
                if (file != null) { //是文件
                    if (TamPub1->FileOperation->extractFileName(file->FullName)->ToLower()->Equals("thumbs.db")) continue;
                    if (TamPub1->FileOperation->extractFileName(file->FullName)->ToLower()->Equals("page.xml")) continue;
                    if (TamPub1->FileOperation->extractFileName(file->FullName)->ToLower()->Equals("project.xml")) continue;
                    int $j;
                    for ($j = 0; $j < item->children->Count; $j++) {
                        if (item->children[$j]->value->type != Item->ITEM_TYPE_IMAGE) continue;
                        if (item->children[$j]->value->filename->ToLower()->Equals(TamPub1->FileOperation->extractFileName(file->FullName)->ToLower())) break;
                    }
                    if ($j < item->children->Count) continue;
                    \TamPub1\Tree newItem = item->add(new Item());
                    newItem->value->type = Item->ITEM_TYPE_IMAGE;
                    newItem->value->filename = TamPub1->FileOperation->extractFileName(TamPub1->FileOperation->extractFileName(file->FullName));
                    $result->Append("增加资源文件：" + file->FullName->Substring(rootPath->Length, file->FullName->Length - rootPath->Length) +"\n");
                } else {  //对于子目录
                    dir = files[$i] as DirectoryInfo;
                    if (!System->IO->File->Exists(dir->FullName + "\\page.xml")) continue;
                    //已经存在的则不添加
                    int $j;
                    for ($j = 0; $j < item->children->Count; $j++) {
                        if (item->children[$j]->value->type != Item->ITEM_TYPE_FOLDER) continue;
                        if (item->children[$j]->value->folderName->ToLower()->Equals(TamPub1->FileOperation->extractFileName(dir->FullName)->ToLower())) break;
                    }
                    if ($j < item->children->Count) {
                        $result->Append(scanFolder(rootItem, item->children[$j]));
                        continue;
                    }
                    \TamPub1\Tree newItem = item->add(new Item());
                    newItem->value->type = Item->ITEM_TYPE_FOLDER;
                    newItem->value->folderName = TamPub1->FileOperation->extractFileName(dir->FullName);
                    newItem = newItem->addFirst(new Item());
                    newItem->value->type = Item->ITEM_TYPE_PAGE;
                    newItem->value->filename = "page.xml";
                    $result->Append("增加页面：" + dir->FullName->Substring(rootPath->Length, dir->FullName->Length - rootPath->Length) +"\n");
                    $result->Append(scanFolder(rootItem, newItem->parent));
                }
            }
            return $result->ToString();
        }

    private function generateProjectName(): string {
        int index = 1;
            String s;
            while (true) {
                s = "project" + index;
                int $i;
                for ($i = 0; $i < $this->projects->children->Count; $i++) {
                    if ($this->projects->children[$i]->value->projectFolderName == s) {
                        break;
                    }
                }
                if ($i >= $this->projects->children->Count) {
                    if (System->IO->Directory->Exists($this->path + s)) {
                        index++;
                        continue;
                    }
                    return s;
                }
                index++;
            }
        }
    /// <summary>
    /// 在item下面创建一个目录，如果item不是目录，则平级创建目录
    /// </summary>
    public function newFolder(\TamPub1\Tree $item, string $folderName = ""): \TamPub1\Tree {
        string $this->path = getDiskPath(item);
            //找到可以创建目录的位置
            while (true) {
                if (item->value->type == Item->ITEM_TYPE_FOLDER) break;
                if (item->value->type == Item->ITEM_TYPE_PROJECT) break;
                item = item->parent;
                if (item == null) return item;
            }
            //产生目录名
            if (folderName->Length <= 0) {
            folderName = generateFolderName(item);
        }
            //磁盘中新建目录
            if (System->IO->Directory->Exists($this->path + folderName)) return null;
            try {
                System->IO->Directory->CreateDirectory($this->path + folderName);
            } catch {
                return null;
            }
            //solution结构中新建目录
            item = item->add(new Item());
            item->value->type = Item->ITEM_TYPE_FOLDER;
            item->value->folderName = folderName;
            return item;
        }

    public function deleteFolder(\TamPub1\Tree $item): bool {
        if (item->value->type != Item->ITEM_TYPE_FOLDER) {
            return false;
        }
    string $this->path = getDiskPath(item);
            item->parent->children->Remove(item);
            //TamPub1.FileOperation.deleteFolder($this->path);
            saveProject(getProject(item->parent));
            return true;
        }
    /// <summary>
    /// 在item下面产生一个新的目录名字，不能和同济目录名重复
    /// </summary>
    private function generateFolderName(\TamPub1\Tree $item): string {
        int index = 1;
            String s;
            while (true) {
                s = "新的页面" + index;
                int $i;
                for ($i = 0; $i < item->children->Count; $i++) {
                    if (item->children[$i]->value->type != Item->ITEM_TYPE_FOLDER) continue;
                    if (item->children[$i]->value->folderName->ToUpper() == s->ToUpper()) {
                        break;
                    }
                }
                if ($i >= item->children->Count) {
                    return s;
                }
                index++;
            }
        }

    private function getFolder(\TamPub1\Tree $project, string $folderName): \TamPub1\Tree {
        for (int $i = 0; $i < $project->children->Count;
        $i++) {
            if ($project->children[$i]->value->type != Item->ITEM_TYPE_FOLDER) continue;
        if ($project->children[$i]->value->folderName->ToUpper() != folderName->ToUpper()) continue;
        return $project->children[$i];
    }
            return null;
        }
public \TamPub1\Tree createPath(\TamPub1\Tree project, string $this->path) {
$this->path = TamPub1->StringFunc->deleteFrontChar($this->path, '/');
$this->path = TamPub1->StringFunc->deleteRearChar($this->path, '/');
\TamPub1\Tree $node = project;
string[] s = $this->path->Split('/');
for (int $i = 0;
$i < s->Length;
$i++) {
if (getFolder(node, s[$i]) != null) {
$node = getFolder(node, s[$i]);
continue;
}

$node = $node->add(new Item());
$node->value->type = Item->ITEM_TYPE_FOLDER;
        $node->value->folderName = s[$i];
    }
            return node;
        }
        /// <summary>
        /// 获取item在磁盘的绝对路径，如果item不是目录，则不计算在内
        /// </summary>
        public static function getDiskPath(\TamPub1\Tree $item): string {
    string $result = "";
            while (true) {
                if (item->value->type == Item->ITEM_TYPE_PROJECT) {
                    return item->value->projectPath + $result;
                } else if (item->value->type == Item->ITEM_TYPE_FOLDER) {
                    $result = item->value->folderName + "\\" + $result;
                }
                item = item->parent;
                if (item == null) break;
            }
            return $result;
        }
        /// <summary>
        /// 获取item的路径，如果item不是目录，则不计算在内
        /// </summary>
        public static function getPath(\TamPub1\Tree $item): string {
    string $result = "";
            while (true) {
                if (item->value->type == Item->ITEM_TYPE_PROJECT) {
                    return $result;
                } else if (item->value->type == Item->ITEM_TYPE_FOLDER) {
                    $result = "/" + item->value->folderName + $result;
                }
                item = item->parent;
                if (item == null) break;
            }
            return $result;
        }
        public bool projectExists(string projectPath) {
    lock(lockSolution){
                for (int $i = 0; $i < $this->projects->children->Count; $i++) {
        if ($this->projects->children[$i]->value->projectPath->ToUpper() == projectPath->ToUpper()) return true;
    }
                return false;
            }
        }
        /// <summary>根据虚拟路径获取projectItem</summary>
        public function getItem(string $path): \TamPub1\Tree {
    //public static TamPub1.Tree<Item> getItem(TamPub1.Tree<Item> $this->projects, string $this->path) {
    lock(lockSolution){
    \TamPub1\Tree item = $this->projects;
    $this->path = TamPub1->StringFunc->deleteFrontChar($this->path, '/');
    $this->path = TamPub1->StringFunc->deleteRearChar($this->path, '/');
    string[] s = $this->path->Split('/');
                int $i = 0;
                for (int $j = 0; $j < s->Length; $j++) {
        s[$j] = s[$j]->ToUpper();
        for ($i = 0; $i < item->children->Count; $i++) {
            string folderName;
                        if (item->children[$i]->value->type == Item->ITEM_TYPE_PROJECT) {
                folderName = item->children[$i]->value->projectFolderName;
                        } else if (item->children[$i]->value->type == Item->ITEM_TYPE_PAGE) {
                folderName = item->children[$i]->value->filename;
                        } else if (item->children[$i]->value->type == Item->ITEM_TYPE_IMAGE) {
                folderName = item->children[$i]->value->filename;
                        } else {
                folderName = item->children[$i]->value->folderName;
                        }
                        folderName = folderName->ToUpper();
                        if (s[$j]->Equals(folderName)) {
                item = item->children[$i];
                            $i = -1;
                            break;
                        }
                    }
        if ($i >= 0) {
            //Etc.Pub.log.writeWarning($this->projects.children.Count + "");
            return null;
        }
    }
                return item;
            }
        }
}

namespace Solution\Solution;

use ScriptEngine\ScriptEngine;
use Solution\Page;
use TamPub1\Etc;
use TamPub1\StringFunc;

class Item {
    /**
     * @var int 工程名字
     */
    public static $ITEM_TYPE_PROJECT = 10;
    /**
     * @var int 目录
     */
    public static $ITEM_TYPE_FOLDER = 20;
    /**
     * @var int 工程描述文件
     */
    public static $ITEM_TYPE_PROJECTFILE = 30;
    /**
     * @var int 页面描述文件
     */
    public static $ITEM_TYPE_PAGE = 40;
    /**
     * @var int 图片文件
     */
    public static $ITEM_TYPE_IMAGE = 50;
    public $type;
    //project本身部分
    /**
     * @var bool 项目是否被正确载入
     */
    public $enabled = false;
    public $projectName = "";
    public $projectFolderName = "";
    public $projectPath = "";
    /**
     * @var string 项目在物理硬盘上的路径和文件名
     */
    public $projectFilePathName = "";
    /**
     * @var int 项目文件在物理硬盘上，上次被修改的时间
     */
    public $projectLastModifyTime;
    /**
     * @var \ScriptEngine\DBConnection
     */
    public $dbConnection = null;
    /**
     * @var string 目录
     */
    public $folderName = "";
    /**
     * @var string 目录别名
     */
    public $folderAlias = "";
    //页面描述文件和图片文件
    public $filename = "";
    /**
     * @var Page 页面数据
     */
    public $page = null;
    /**
     * @var \Etc\Skin 皮肤数据
     */
    public $skin;
    //显示部分
    //public System.Windows.Forms.TreeNode displayTreeNode = null;
    //public object displayTreeNode = null;

    public function __construct() {
        $this->type = self::$ITEM_TYPE_PROJECT;
        $this->projectLastModifyTime = time();
        $this->skin = new \Etc\Skin();
    }

    public function ToString(): string {
        $result = "";
        switch ($this->type) {
            case self::$ITEM_TYPE_PROJECT:
                $result = $this->projectName . "(" . $this->projectFolderName . ")";
                break;
            case self::$ITEM_TYPE_FOLDER:
                if (StringFunc::length($this->folderAlias) > 0) {
                    $result = $this->folderName . "(" . $this->folderAlias . ")";
                } else
                    $result = $this->folderName;
                break;
            case self::$ITEM_TYPE_PROJECTFILE:
                $result = $this->filename;
                break;
            case self::$ITEM_TYPE_PAGE:
                $result = $this->filename;
                break;
            case self::$ITEM_TYPE_IMAGE:
                $result = $this->filename;
                break;
            default:
                $result = "非法类型代码：" . $this->type;
                break;
        }
        return $result;
    }
}