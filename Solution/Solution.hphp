<?php
/**
 * Created by PhpStorm.
 * User: Jesse Tam
 * Date: 2019/6/4 0004
 * Time: 下午 11:52
 */

namespace Solution;

require_once __DIR__ . '/../Etc/Skin.hphp';
require_once __DIR__ . '/../ScriptEngine/DBConnection.hphp';

use const Grpc\STATUS_INTERNAL;
use ScriptEngine\ScriptEngine;
use Solution\Solution\Item;
use TamPub1\ConfigFileXml;
use TamPub1\FileOperation;
use TamPub1\StringFunc;
use TamPub1\TamLocker;

class Solution {
    /**
     * @var \TamPub1\Tree Tree<Item>
     */
    public $projects;
    public $name = "";
    public $filename = "";
    public $note = "";
    public $path = ""; //解决方案在本地磁盘的绝对路径
    /**
     * @var TamLocker 线程锁
     */
    public $lockSolution;

    //private System.Windows.Forms.TreeView treeView = null; //显示目录结构的控件
    public function __construct() {
        $this->projects = new \TamPub1\Tree();
        $this->lockSolution = new TamLocker();
    }

    public function reloadProject(int $projectIndex): string {
        if (($projectIndex < 0) || ($projectIndex >= count($this->projects->children))) return "序号超出范围";
        $project = $this->projects->children[$projectIndex];
        array_splice($this->projects->children, $projectIndex, 1);
        $result = $this->loadProject($project->value->projectPath);
        $project = $this->projects->children[count($this->projects->children) - 1];
        $this->projects->children[count($this->projects->children) - 1] = $this->projects->children[$projectIndex];
        $this->projects->children[$projectIndex] = $project;
        return $result;
    }

    public function loadProject(string $projectPath): string {
        \Etc\Pub::$pathSeperator = FileOperation::getPathSeperator($projectPath);
        $projectPath = StringFunc::addRearChar($projectPath, \Etc\Pub::$pathSeperator);
        $project = $this->projects->addValue(new Item());
        $project->value->type = Item::$ITEM_TYPE_PROJECT;
        $project->value->projectFolderName = FileOperation::getFolderName($projectPath);
        $project->value->projectPath = $projectPath;
        $project->value->skin = new \Etc\Skin();
        $project->value->skin->loadDir($project->value->projectPath . "skins" . \Etc\Pub::$pathSeperator);
        $project->value->dbConnection = new \ScriptEngine\DBConnection();
        $dbConnection = $project->value->dbConnection;
        if (!FileOperation::exists($projectPath . "project.xml")) {
            return "project.xml文件不存在";
        }
        $doc = simplexml_load_file($projectPath . "project.xml");
        //产生项目文件
        //\TamPub1\Tree projectFile;
        $projectFile = $project->addValue(new Item());
        $projectFile->value->type = Item::$ITEM_TYPE_PROJECTFILE;
        $projectFile->value->filename = "project.xml";
        //读取项目通用信息
        //System->Xml->XmlNode node, nodeTemp;
        ConfigFileXml::create($doc, "/EBProj/projectName");
        $node = $doc->xpath("/EBProj/projectName")[0];
        $project->value->projectName = ConfigFileXml::readStringFromNode($node, "");
        if ($project->value->projectName === "") {
            $project->value->projectName = "新建项目";
        }
        //读取页信息V2
        //\TamPub1\Tree item;
        $parentNodes = $doc->xpath("/EBProj/projectItems")[0];
        for ($i = 0; $i < count($parentNodes->children()); $i++) {
            //创建页面目录
            $node = $parentNodes->children()[$i];
            if ($node->getName() === "page") {
                $nodeTemp = $node->attributes()->pathname;
                if (!$nodeTemp) continue;
                $pathname = $nodeTemp;
                $item = $this->createPath($project, $pathname);
                //创建页面信息文件
                //\TamPub1\Tree frame;
                $frame = $item->addValue(new Item());
                $frame->value->type = Item::$ITEM_TYPE_PAGE;
                $frame->value->filename = "page.xml";
                $nodeTemp = $node->attributes()->alias;
                if ($nodeTemp) {
                    $item->value->folderAlias = $nodeTemp;
                }
            } else if ($node->getName() === "image") {
                $node = $node->attributes()->pathname;
                if (!$node) continue;
                $pathname = $node;
                $item = $this->createPath($project, $pathname);
                $item->value->type = Item::$ITEM_TYPE_IMAGE;
                $item->value->filename = FileOperation::extractFileName($pathname);
            }
        }
        //读取数据库连接信息
        $dbConnection->clear();
        //ScriptEngine->DBConnection->Item connectionItem;
        $nodes = $doc->xpath("/EBProj/dbConnections/connection");
        for ($i = 0; $i < count($nodes); $i++) {
            $node = $nodes[$i];
            $node = $node->attributes()->name;
            if (!$node) continue;
            $connectionItem = new \ScriptEngine\DBConnection\Item();
            $connectionItem->name = $node;
            $dbConnection->addItem($connectionItem);
            //db connection string
            $node = $nodes[$i]->xpath("connectionString");
            if (!$node) continue;
            $node = $node[0];
            $connectionItem->connectionString = ConfigFileXml::readStringFromNode($node, "");
        }
        $project->value->projectFilePathName = $projectPath . "project.xml";
        if (!FileOperation::exists($project->value->projectFilePathName)) {
            return "无法获取项目文件信息";
        }
        $project->value->projectLastModifyTime = filemtime($project->value->projectFilePathName);
        $project->value->enabled = true;
        return "";
    }

    /// <summary>判断硬盘的物理文件是否发生变化，如果变化则需要重新载入项目</summary>
    public function needReload(): bool {
        for ($i = 0; $i < count($this->projects->children); $i++) {
            if (!FileOperation::exists($this->projects->children[$i]->value->projectFilePathName)) return true;
            if (filemtime($this->projects->children[$i]->value->projectFilePathName) !=
                $this->projects->children[$i]->value->projectLastModifyTime) return true;
        }
        return false;
    }
    /// <summary>
    /// 获取item所属的project元素
    /// </summary>
    public function getProject(\TamPub1\Tree $item): ? \TamPub1\Tree {
        $this->lockSolution->Lock();
        while (true) {
            if ($item->value->type == Item::$ITEM_TYPE_PROJECT) {
                $this->lockSolution->Unlock();
                return $item;
            }
            $item = $item->parent;
            if ($item == null) {
                $this->lockSolution->Unlock();
                return null;
            }
        }
    }

    private function getFolder(\TamPub1\Tree $project, string $folderName): ? \TamPub1\Tree {
        for ($i = 0; $i < count($project->children); $i++) {
            if ($project->children[$i]->value->type != Item::$ITEM_TYPE_FOLDER) continue;
            if (!(StringFunc::toUpper($project->children[$i]->value->folderName) === StringFunc::toUpper($folderName))) continue;
            return $project->children[$i];
        }
        return null;
    }

    public function createPath(\TamPub1\Tree $project, string $path): \TamPub1\Tree {
        $path = StringFunc::deleteFrontChar($path, '/');
        $path = StringFunc::deleteRearChar($path, '/');
        $node = $project;
        $s = mb_split('/', $path);
        for ($i = 0; $i < count($s); $i++) {
            if ($this->getFolder($node, $s[$i]) != null) {
                $node = $this->getFolder($node, $s[$i]);
                continue;
            }
            $node = $node->addValue(new Item());
            $node->value->type = Item::$ITEM_TYPE_FOLDER;
            $node->value->folderName = $s[$i];
        }
        return $node;
    }

    /**
     * 获取item在磁盘的绝对路径，如果item不是目录，则不计算在内
     * @param \TamPub1\Tree $item
     * @return string
     */
    public static function getDiskPath(\TamPub1\Tree $item): string {
        $result = "";
        while (true) {
            if ($item->value->type == Item::$ITEM_TYPE_PROJECT) {
                return $item->value->projectPath . $result;
            } else if ($item->value->type == Item::$ITEM_TYPE_FOLDER) {
                $result = $item->value->folderName . "\\" . $result;
            }
            $item = $item->parent;
            if ($item == null) break;
        }
        return $result;
    }

    /**
     * 获取item的路径，如果item不是目录，则不计算在内
     * @param \TamPub1\Tree $item
     * @return string
     */
    public static function getPath(\TamPub1\Tree $item): string {
        $result = "";
        while (true) {
            if ($item->value->type == Item::$ITEM_TYPE_PROJECT) {
                return $result;
            } else if ($item->value->type == Item::$ITEM_TYPE_FOLDER) {
                $result = "/" . $item->value->folderName . $result;
            }
            $item = $item->parent;
            if ($item == null) break;
        }
        return $result;
    }

    public function projectExists(string $projectPath): bool {
        $this->lockSolution->Lock();
        for ($i = 0; $i < count($this->projects->children); $i++) {
            if (StringFunc::toUpper($this->projects->children[$i]->value->projectPath) === StringFunc::toUpper($projectPath)) {
                $this->lockSolution->Unlock();
                return true;
            }
        }
        $this->lockSolution->Unlock();
        return false;
    }

    /**
     * 根据虚拟路径获取projectItem
     * @param string $path
     * @return \TamPub1\Tree
     */
    public function getItem(string $path): \TamPub1\Tree {
        //public static TamPub1.Tree<Item> getItem(TamPub1.Tree<Item> $this->projects, string $this->path) {
        $item = $this->projects;
        $this->path = StringFunc::deleteFrontChar($this->path, '/');
        $this->path = StringFunc::deleteRearChar($this->path, '/');
        $s = mb_split('/', $this->path);
        $i = 0;
        for ($j = 0; $j < $s->Length; $j++) {
            $s[$j] = StringFunc::toUpper($s[$j]);
            for ($i = 0; $i < count($item->children); $i++) {
                //string folderName;
                if ($item->children[$i]->value->type == Item::$ITEM_TYPE_PROJECT) {
                    $folderName = $item->children[$i]->value->projectFolderName;
                } else if ($item->children[$i]->value->type == Item::$ITEM_TYPE_PAGE) {
                    $folderName = $item->children[$i]->value->filename;
                } else if ($item->children[$i]->value->type == Item::$ITEM_TYPE_IMAGE) {
                    $folderName = $item->children[$i]->value->filename;
                } else {
                    $folderName = $item->children[$i]->value->folderName;
                }
                $folderName = StringFunc::toUpper($folderName);
                if ($s[$j] === $folderName) {
                    $item = $item->children[$i];
                    $i = -1;
                    break;
                }
            }
            if ($i >= 0) {
                //Etc.Pub.log.writeWarning($this->projects.children.Count + "");
                return null;
            }
        }
        return $item;

    }
}

namespace Solution\Solution;

use ScriptEngine\ScriptEngine;
use Solution\Page;
use TamPub1\Etc;
use TamPub1\StringFunc;

class Item {
    /**
     * @var int 工程名字
     */
    public static $ITEM_TYPE_PROJECT = 10;
    /**
     * @var int 目录
     */
    public static $ITEM_TYPE_FOLDER = 20;
    /**
     * @var int 工程描述文件
     */
    public static $ITEM_TYPE_PROJECTFILE = 30;
    /**
     * @var int 页面描述文件
     */
    public static $ITEM_TYPE_PAGE = 40;
    /**
     * @var int 图片文件
     */
    public static $ITEM_TYPE_IMAGE = 50;
    public $type;
    //project本身部分
    /**
     * @var bool 项目是否被正确载入
     */
    public $enabled = false;
    public $projectName = "";
    public $projectFolderName = "";
    public $projectPath = "";
    /**
     * @var string 项目在物理硬盘上的路径和文件名
     */
    public $projectFilePathName = "";
    /**
     * @var int 项目文件在物理硬盘上，上次被修改的时间
     */
    public $projectLastModifyTime;
    /**
     * @var \ScriptEngine\DBConnection
     */
    public $dbConnection = null;
    /**
     * @var string 目录
     */
    public $folderName = "";
    /**
     * @var string 目录别名
     */
    public $folderAlias = "";
    //页面描述文件和图片文件
    public $filename = "";
    /**
     * @var Page 页面数据
     */
    public $page = null;
    /**
     * @var \Etc\Skin 皮肤数据
     */
    public $skin;
    //显示部分
    //public System.Windows.Forms.TreeNode displayTreeNode = null;
    //public object displayTreeNode = null;

    public function __construct() {
        $this->type = self::$ITEM_TYPE_PROJECT;
        $this->projectLastModifyTime = time();
        $this->skin = new \Etc\Skin();
    }

    public function ToString(): string {
        $result = "";
        switch ($this->type) {
            case self::$ITEM_TYPE_PROJECT:
                $result = $this->projectName . "(" . $this->projectFolderName . ")";
                break;
            case self::$ITEM_TYPE_FOLDER:
                if (StringFunc::length($this->folderAlias) > 0) {
                    $result = $this->folderName . "(" . $this->folderAlias . ")";
                } else
                    $result = $this->folderName;
                break;
            case self::$ITEM_TYPE_PROJECTFILE:
                $result = $this->filename;
                break;
            case self::$ITEM_TYPE_PAGE:
                $result = $this->filename;
                break;
            case self::$ITEM_TYPE_IMAGE:
                $result = $this->filename;
                break;
            default:
                $result = "非法类型代码：" . $this->type;
                break;
        }
        return $result;
    }
}