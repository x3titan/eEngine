<?php
/**
 * Created by PhpStorm.
 * User: Jesse Tam
 * Date: 2019/6/6 0006
 * Time: 上午 12:19
 */

namespace eEngine;

require_once __DIR__ . '/Etc/Pub.hphp';
require_once __DIR__ . '/PubFuncPhp/TamPub1.hphp';

use Etc\Pub;
use TamPub1\ConfigurationManager;
use TamPub1\FileOperation;
use TamPub1\ShareMemory;
use TamPub1\StringBuilder;
use TamPub1\StringFunc;

class PageLoad {
    /**
     * @var string 创建控件主体部分
     */
    public $jsStringInitControl = "";
    /**
     * @var string 声明部分
     */
    public $jsStringOnPageCreate = "";
    /**
     * @var string onLoad开始部分
     */
    public $jsStringOnPageLoad = "";
    /**
     * @var string onLoad完成部分
     */
    public $jsStringOnControlLoad = "";
    public $jsStringInclude = "";
    public $jsStringTitle = "";
    public $jsStringHead = "";
    public $jsStringSearchText = "";

    //private HttpPostedFile postFile = null;

    public function Page_Load(): void {
        //print(\Etc\Pub::selfUpgraded()? "true": "false");
        //ShareMemory::delete(0xAEE);
        //die();
        $startTime = microtime(true);
        Pub::init();
        if (\Etc\Pub::selfUpgraded()) {
            ShareMemory::delete(0xAEE);
        }
        Pub::loadEEngine();
        Pub::loadProjectCache();
        //Pub::saveEEngine();

        //CacheGenerator::start();

        //init CacheGenerator //!!! code later
        //!!! CacheGenerator.applicationPath = Request.ApplicationPath;
        //!!! CacheGenerator.start();
        //Request.ContentEncoding = System.Text.Encoding.GetEncoding("gb2312");
        $url = isset($_GET["_L_"]) ? $_GET["_L_"] : null;
        //$url = "/TCloudLinux/admin/userAdmin/userAdmin";
        $taskSet = isset($_GET["_T_"]) ? $_GET["_T_"] : null;
        $fileUpload = isset($_GET["_F_"]) ? $_GET["_F_"] : null;
        if ($url == null) $url = "";
        //url = String(url.getBytes("iso-8859-1"), "utf-8");
        //Solution.PageWeb page;
        \Etc\Pub::$lockObject->Lock();
        $page = \Etc\Pub::$eEngine->getPage($url);
        \Etc\Pub::$lockObject->Unlock();
        if ($page == null) {
            if (StringFunc::length($url) > 0) {
                \Etc\Pub::$log->writeWarning("无法载入页面，尝试载入默认页面,url=" . $url);
            }
            //尝试载入默认页面
            $url = ConfigurationManager::readString("ePage", "defaultPage");
            \Etc\Pub::$lockObject->Lock();
            $page = \Etc\Pub::$eEngine->getPage($url);
            \Etc\Pub::$lockObject->Unlock();
            if ($page == null) {
                $jsStringInitControl = "alert(\"" .
                    "can not load page，url=" . $url .
                    "\");";
                \Etc\Pub::$log->writeWarning("无法载入页面,url=" . $url);
                return;
            }
        }
        $project = \Etc\Pub::$eEngine->solution->getProject($page->projectItem);
        $project->value->page = null;
        Pub::saveEEngine();
        $project->value->page = $page;
        if ($fileUpload != null) {


        } else if ($taskSet == null) {
            \Etc\Pub::$log->writeCommon("time2:" . floor((microtime(true) - $startTime) * 1000) . "ms");
            $startTime = microtime(true);
            //Etc.Pub.log.writeCommon("start generate webpage, url=" + url);
            $scriptEngineInst = $page->initScriptEngine("Session", "Request", "Response");
            if ($scriptEngineInst == null) {
                //Response . Clear();
                //Response . Flush();
                //Response . End();
                return;
            }
            $this->jsStringTitle = $page->generateJsStringTitle();
            $this->jsStringHead = $page->generateJsStringHead();
            $this->jsStringInclude = $page->generateJsStringInclude();
            $this->jsStringOnPageCreate = $page->generateJsStringOnPageCreate();
            $this->jsStringOnPageLoad = $page->generateJsStringOnPageLoad();

            $codeCachePath = FileOperation::currentFilePath() . "cache" . FileOperation::extractFilePath($url);
            if (FileOperation::exists($codeCachePath . "_initControl.epage")) {
                $this->jsStringInitControl = FileOperation::loadToStringGBK($codeCachePath . "_initControl.epage");
            } else {
                $this->jsStringInitControl = $page->generateJsStringInitControl();
                FileOperation::saveString($codeCachePath . "_initControl.epage", $this->jsStringInitControl);
            }
            $this->jsStringOnControlLoad = $page->generateJsStringOnControlLoad();
            \Etc\Pub::$log->writeCommon("generate page in " . floor((microtime(true) - $startTime) * 1000) . "ms, url=" . $url .
                ", size=" . (StringFunc::length($this->jsStringOnPageCreate) +
                    StringFunc::length($this->jsStringOnPageLoad) +
                    StringFunc::length($this->jsStringInitControl) +
                    StringFunc::length($this->jsStringOnControlLoad)));

        } else {
            //test();
            //return;
            //获取post字串
            $startTime = microtime(true);
            //Etc.Pub.log.writeCommon("taskset proc. start, url=" + url);
            $data = file_get_contents("php://input");
            if (!$data) die();
            $data = mb_convert_encoding($data, 'UTF-8',
                mb_detect_encoding($data, 'UTF-8, ISO-8859-1', true));

            //data = Server.UrlDecode(data);
            if ($page->initScriptEngine("", "", "") == null) {
                \Etc\Pub::$log->writeWarning("taskset(" . $taskSet . ") execute with error, url=" . $url);
                die();
            }
            //以下部分必须在web.config文件中加才有效，如果在这里加会冲突
            //Response.AppendHeader("Access-Control-Allow-Origin", "*");
            //Response.AppendHeader("Access-Control-Allow-Methods", "POST");
            //Response.AppendHeader("Access-Control-Allow-Headers", "content-type");
            print($page->executeScript2($taskSet, $data));
            $page->disposeScriptEngine();
            \Etc\Pub::$log->writeCommon("taskset(" . $taskSet . ") complete in " .
                floor((microtime(true) - $startTime) * 1000) . "ms, url=" . $url);
            die();
        }
    }
}


/**
 * Class CacheGenerator cache同步生成器，包含资源和离线页面的生成
 * @package eEngine
 */
class CacheGenerator {
    //public static TamClass1.PropertyList pageList = new TamClass1.PropertyList();
    public static $eeDiskPath = "";
    public static $applicationPath = "";
    public static $eePath = "";

    public static function start(): void {
        if (self::$applicationPath === "/") self::$applicationPath = "";
        self::$eeDiskPath = FileOperation::extractFilePath(FileOperation::currentFilePathName());
        //<add key="eePath" value="http://m.1peijia.com:88/eengine" />
        self::$eePath = StringFunc::deleteRearChar(ConfigurationManager::readString("ePage", "eePath"), '/');
        self::execute();
    }

    private static function execute(): void {
        //int i;
        //$dfolder;
        //TamPub1 . Tree < Solution . Solution . Item> projectItem;
        //FileInfo fi;
        //    string fileBuff, destPath;
        //Etc . Pub . loadProject();
        //synchronize resource file
        for ($i = 0; $i < count(\Etc\Pub::$eEngine->solution->projects->children); $i++) {
            //copy cache folder
            $dfolder = self::$eeDiskPath . "cache" . \Etc\Pub::$pathSeperator .
                FileOperation::extractFileName(StringFunc::deleteRearChar(
                    \Etc\Pub::$eEngine->solution->projects->children[$i]->value->projectPath,
                    \Etc\Pub::$pathSeperator)) . \Etc\Pub::$pathSeperator;
            self::copyCacheDir(\Etc\Pub::$eEngine->solution->projects->children[$i]->value->projectPath, $dfolder);
            //Etc.Pub.log.writeCommon("sync cache folder complete in " + (DateTime.Now - startTime).TotalMilliseconds + "ms, sfolder=" + project.value.projectPath +
            //    ", dfolder=" + dfolder);
        }
        return;
        //copy js header file
        //copyCacheDir(eeDiskPath + "scripts", eeDiskPath + "cache");
        //generate static page
        $projectItem = \Etc\Pub::$eEngine->solution->projects->getFirst();
        while (true) {
            $projectItem = \Etc\Pub::$eEngine->solution->projects->getNext();
            if ($projectItem == null) break;
            if ($projectItem->value->type != \Solution\Solution\Item::$ITEM_TYPE_PAGE) continue;
            $destPath = self::$eeDiskPath . "cache" . \Etc\Pub::$pathSeperator .
                \Etc\Pub::$eEngine->solution->getProject($projectItem)->value->projectFolderName .
                \Solution\Solution::getPath($projectItem) . Replace('/', '\\') . "\\";
            //compare last modify time

            $fileBuff = FileOperation::loadToStringGBK($destPath . "time.txt");
            if (FileOperation::exists($destPath . "index.htm")) {
                if (strlen($fileBuff) > 0) {
                    if (Date("Y-m-d H:i:s", filemtime(\Solution\Solution::getDiskPath($projectItem) . "page.xml")) === $fileBuff) {
                        continue;
                    }
                }
            }
            $fileBuff = Date("Y-m-d H:i:s", filemtime(\Solution\Solution::getDiskPath($projectItem) . "page.xml"));
            FileOperation::deleteFile($destPath . "time.txt");
            FileOperation::saveString($destPath . "time.txt", $fileBuff, "GB2312");
            //generate page

            $page = \Etc\Pub::$eEngine->getPage(\Solution\Solution::getPath($projectItem));
            if ($page == null) continue;
            $page->applicationPath = self::$applicationPath;
            $page->eePath = self::$eePath;
            $fileBuff = $page->generatePage();
            //sPage = eeDiskPath + "cache\\" + Solution.Solution.getProject(projectItem).value.projectFolderName +
            //    Solution.Solution.getPath(projectItem).Replace('/', '\\') + "\\page.htm";
            FileOperation::deleteFile($destPath . "index.htm");
            FileOperation::saveString($destPath . "index.htm", $fileBuff, "GB2312");
            \Etc\Pub::$log->writeWarning("generate offline page: " . $destPath . "index.htm");
        }
    }

    private static function copyCacheDir(string $sdir, string $ddir): bool {
        $sdir = StringFunc::addRearChar($sdir, \Etc\Pub::$pathSeperator);
        $ddir = StringFunc::addRearChar($ddir, \Etc\Pub::$pathSeperator);
        if (!FileOperation::pathExists($ddir)) {
            if (FileOperation::createDir($ddir)) {
                \Etc\Pub::$log->writeCommon("create cache dir: " . $ddir);
            } else {
                \Etc\Pub::$log->writeWarning("can not create cache dir: " . $ddir);
            }
        }

        $files = scandir($sdir);
        foreach ($files as $file) {
            if ($file === ".") continue;
            if ($file === "..") continue;
            if (is_dir($sdir . $file)) {
                self::copyCacheDir($sdir . $file . \Etc\Pub::$pathSeperator, $ddir . $file . \Etc\Pub::$pathSeperator);
            } else {
                if (!FileOperation::isSame($sdir . $file, $ddir . $file)) {
                    if (StringFunc::toLower(FileOperation::getFileExt($file)) === "xml") {
                        //不拷贝页面源文件
                        continue;
                    }
                    if (StringFunc::toLower($file) === "thumbs.db") continue; //不拷贝输入法文件
                    if (!FileOperation::copy($sdir . $file, $ddir . $file)) {
                        \Etc\Pub::$log->writeCommon("copy cache file fail, reason=" . error_get_last()["message"] .
                            ", sfile=" . $sdir . $file .
                            ", dfile=" . $ddir . $file);
                    } else {
                        \Etc\Pub::$log->writeCommon("copy cache file: " . $ddir . $file);
                    }
                }
            }
        }
        return true;
    }
}



